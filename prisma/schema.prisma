datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // For migrations
}

generator client {
provider = "prisma-client-js"
}

model User {
id String @id @default(uuid())
email String @unique
passwordHash String
name String?
role String @default("STUDENT")
department String?
matricNumber String? // Add this field for matriculation number
level String? // Add this field for academic level
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Change from direct Course relation to many-to-many
taughtCourses CourseLecturer[]
attendances Attendance[] @relation("UserToAttendance")
enrolledCourses StudentCourse[]
}

model Course {
id String @id @default(uuid())
code String @unique
name String
description String?
department String?
semester String? @default("FIRST")
// Remove the direct lecturerId field
// lecturerId String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Change from direct User relation to many-to-many
lecturers CourseLecturer[]
schedules Schedule[]
sessions Session[]
students StudentCourse[]
}

// New model for the many-to-many relationship
model CourseLecturer {
id String @id @default(uuid())
courseId String
lecturerId String
assignedAt DateTime @default(now())

course Course @relation(fields: [courseId], references: [id])
lecturer User @relation(fields: [lecturerId], references: [id])

@@unique([courseId, lecturerId])
}

model StudentCourse {
id String @id @default(uuid())
studentId String
courseId String
enrolledAt DateTime @default(now())

student User @relation(fields: [studentId], references: [id])
course Course @relation(fields: [courseId], references: [id])

@@unique([studentId, courseId])
}

model Schedule {
id String @id @default(uuid())
courseId String
dayOfWeek Int
startTime String
endTime String
location String?
createdAt DateTime @default(now())
updatedAt DateTime @default(now())

course Course @relation(fields: [courseId], references: [id])
}

model Session {
id String @id @default(uuid())
courseId String
date DateTime
title String?
topic String?
notes String?
createdAt DateTime @default(now())
updatedAt DateTime @default(now())

course Course @relation(fields: [courseId], references: [id])
attendances Attendance[]
}

model Attendance {
id String @id @default(uuid())
userId String
sessionId String
status String
timestamp DateTime @default(now())
notes String?

user User @relation("UserToAttendance", fields: [userId], references: [id])
session Session @relation(fields: [sessionId], references: [id])

@@unique([userId, sessionId])
}
